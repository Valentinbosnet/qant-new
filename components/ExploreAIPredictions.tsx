"use client"

import { useState, useCallback, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import {
  ArrowRight,
  TrendingUp,
  TrendingDown,
  BarChart2,
  PieChart,
  LineChart,
  RefreshCcw,
  AlertTriangle,
  AlertCircle,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { getMarketPredictions, getSectorPredictions, getCryptoPredictions } from "@/lib/ai-predictions"
import type { Prediction, SectorPrediction, CryptoPrediction } from "@/lib/ai-predictions"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface ExploreAIPredictionsProps {
  onComplete: () => void
}

export default function ExploreAIPredictions({ onComplete }: ExploreAIPredictionsProps) {
  const [activeTab, setActiveTab] = useState("market")
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [predictions, setPredictions] = useState<{
    market: Prediction[]
    sector: SectorPrediction[]
    crypto: CryptoPrediction[]
  }>({
    market: [],
    sector: [],
    crypto: [],
  })

  // Use a ref to track mounted state
  const isMounted = useRef(true)

  // Cleanup on unmount
  const cleanup = () => {
    isMounted.current = false
  }

  const fetchPredictions = useCallback(async () => {
    if (isLoading) return

    setIsLoading(true)
    setError(null)

    try {
      const [market, sector, crypto] = await Promise.all([
        getMarketPredictions(),
        getSectorPredictions(),
        getCryptoPredictions(),
      ])

      // Only update state if component is still mounted
      if (isMounted.current) {
        setPredictions({
          market,
          sector,
          crypto,
        })
      }
    } catch (error) {
      // Only update state if component is still mounted
      if (isMounted.current) {
        console.error("Error fetching predictions:", error)
        setError(error instanceof Error ? error.message : "An unexpected error occurred")
      }
    } finally {
      // Only update state if component is still mounted
      if (isMounted.current) {
        setIsLoading(false)
      }
    }
  }, [isLoading])

  useEffect(() => {
    isMounted.current = true
    fetchPredictions()

    return () => {
      isMounted.current = false
    }
  }, [fetchPredictions])

  const handleComplete = useCallback(() => {
    if (typeof window !== "undefined") {
      localStorage.setItem("aiPredictionsExplored", "true")
    }
    // Use requestAnimationFrame to schedule the callback outside of render
    requestAnimationFrame(() => {
      onComplete()
    })
  }, [onComplete])

  // Use the predictions from state instead of separate state variables
  const { market: marketPredictions, sector: sectorPredictions, crypto: cryptoPredictions } = predictions

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="w-full max-w-2xl mx-auto"
    >
      <Card className="bg-[#2a2a2a] shadow-lg border-gray-800">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-white">Explore AI Predictions</CardTitle>
          <CardDescription className="text-gray-400">
            Discover how our AI analyzes market data to generate investment insights
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="bg-yellow-500/10 border border-yellow-500 rounded-md p-4 mb-6">
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 text-yellow-500 mr-2" />
              <p className="text-yellow-500 font-semibold">Demo Mode</p>
            </div>
            <p className="text-yellow-400 mt-2">
              Using demo predictions. In a production environment, these would be generated by the OpenAI API.
            </p>
          </div>
          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="flex justify-end mb-4">
            <Button
              onClick={() => fetchPredictions()}
              disabled={isLoading}
              className="bg-blue-500 hover:bg-blue-600 text-white"
            >
              <RefreshCcw className="mr-2 h-4 w-4" />
              {isLoading ? "Loading..." : "Refresh Predictions"}
            </Button>
          </div>

          <Tabs defaultValue="market" className="w-full" value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3 bg-[#333333]">
              <TabsTrigger value="market" className="data-[state=active]:bg-emerald-500">
                <BarChart2 className="mr-2 h-4 w-4" />
                Market
              </TabsTrigger>
              <TabsTrigger value="sector" className="data-[state=active]:bg-emerald-500">
                <PieChart className="mr-2 h-4 w-4" />
                Sectors
              </TabsTrigger>
              <TabsTrigger value="crypto" className="data-[state=active]:bg-emerald-500">
                <LineChart className="mr-2 h-4 w-4" />
                Crypto
              </TabsTrigger>
            </TabsList>

            <TabsContent value="market" className="mt-4 space-y-4">
              <div className="grid gap-4">
                {isLoading ? (
                  <Card className="bg-[#333333] border-gray-700">
                    <CardContent className="p-4 text-center">
                      <p className="text-gray-400">Loading predictions...</p>
                    </CardContent>
                  </Card>
                ) : marketPredictions.length > 0 ? (
                  marketPredictions.map((prediction, index) => (
                    <Card key={index} className="bg-[#333333] border-gray-700">
                      <CardContent className="p-4">
                        <div className="flex justify-between items-center mb-2">
                          <h3 className="text-lg font-semibold text-white">{prediction.index}</h3>
                          <Badge
                            className={`${
                              prediction.prediction === "bullish"
                                ? "bg-green-500"
                                : prediction.prediction === "bearish"
                                  ? "bg-red-500"
                                  : "bg-yellow-500"
                            }`}
                          >
                            {prediction.prediction === "bullish" ? (
                              <TrendingUp className="mr-1 h-3 w-3" />
                            ) : prediction.prediction === "bearish" ? (
                              <TrendingDown className="mr-1 h-3 w-3" />
                            ) : null}
                            {prediction.prediction.charAt(0).toUpperCase() + prediction.prediction.slice(1)}
                          </Badge>
                        </div>
                        <div className="flex justify-between text-sm text-gray-400 mb-3">
                          <span>Confidence: {prediction.confidence}%</span>
                          <span>Timeframe: {prediction.timeframe}</span>
                        </div>
                        <div>
                          <p className="text-sm text-gray-300 mb-1">Key Factors:</p>
                          <div className="flex flex-wrap gap-2">
                            {prediction.factors.map((factor, i) => (
                              <Badge key={i} variant="outline" className="bg-[#444444] text-gray-300">
                                {factor}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))
                ) : (
                  <Card className="bg-[#333333] border-gray-700">
                    <CardContent className="p-4 text-center">
                      <p className="text-gray-400">Failed to load predictions. Please try refreshing.</p>
                    </CardContent>
                  </Card>
                )}
              </div>
            </TabsContent>

            <TabsContent value="sector" className="mt-4">
              <div className="grid grid-cols-2 gap-4">
                {sectorPredictions.map((prediction, index) => (
                  <Card key={index} className="bg-[#333333] border-gray-700">
                    <CardContent className="p-4">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-lg font-semibold text-white">{prediction.sector}</h3>
                        <Badge
                          className={`${
                            prediction.prediction === "bullish"
                              ? "bg-green-500"
                              : prediction.prediction === "bearish"
                                ? "bg-red-500"
                                : "bg-yellow-500"
                          }`}
                        >
                          {prediction.prediction === "bullish" ? (
                            <TrendingUp className="mr-1 h-3 w-3" />
                          ) : prediction.prediction === "bearish" ? (
                            <TrendingDown className="mr-1 h-3 w-3" />
                          ) : null}
                          {prediction.confidence}%
                        </Badge>
                      </div>
                      <div>
                        <p className="text-sm text-gray-300 mb-1">Top Picks:</p>
                        <div className="flex flex-wrap gap-2">
                          {prediction.topPicks.map((stock, i) => (
                            <TooltipProvider key={i}>
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <Badge className="bg-[#444444] hover:bg-[#555555] cursor-pointer">{stock}</Badge>
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p>Click to view detailed analysis</p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="crypto" className="mt-4 space-y-4">
              <div className="grid gap-4">
                {cryptoPredictions.map((prediction, index) => (
                  <Card key={index} className="bg-[#333333] border-gray-700">
                    <CardContent className="p-4">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-lg font-semibold text-white">{prediction.crypto}</h3>
                        <Badge
                          className={`${
                            prediction.prediction === "bullish"
                              ? "bg-green-500"
                              : prediction.prediction === "bearish"
                                ? "bg-red-500"
                                : "bg-yellow-500"
                          }`}
                        >
                          {prediction.prediction === "bullish" ? (
                            <TrendingUp className="mr-1 h-3 w-3" />
                          ) : prediction.prediction === "bearish" ? (
                            <TrendingDown className="mr-1 h-3 w-3" />
                          ) : null}
                          {prediction.prediction.charAt(0).toUpperCase() + prediction.prediction.slice(1)}
                        </Badge>
                      </div>
                      <div className="flex justify-between text-sm text-gray-400 mb-3">
                        <span>Confidence: {prediction.confidence}%</span>
                        <span>Target: {prediction.priceTarget}</span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button
            onClick={handleComplete}
            className="bg-gradient-to-r from-emerald-500 to-teal-500 hover:opacity-90 text-white"
          >
            Continue <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}

