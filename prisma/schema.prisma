// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String         @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  String         @default("user")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  onboardingCompleted   Boolean        @default(false)  // Ajout du champ manquant
  accounts              Account[]
  sessions              Session[]
  subscription          Subscription?
  portfolios            Portfolio[]
}



model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  
  @@unique([email, token])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  plan      String   @default("free")
  status    String   @default("active")
  startDate DateTime @default(now())
  endDate   DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      Asset[]
}

model Asset {
  id          String   @id @default(cuid())
  symbol      String
  name        String
  quantity    Float
  buyPrice    Float
  portfolioId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

